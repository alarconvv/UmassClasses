---
title: "AnalysisPilot"
author: "Viviana Romero Alarcon"
format: html
editor: visual
---

# Predicting Femur circumference

### Data

```{r}
# load libraries
library(tidyverse)
library(ggExtra)
library(caret)

library(pacman)
pacman::p_load(dplyr,readr, ggplot2, broom, performance, here)

setwd(here::here())


# read data

data <- read_csv(file = "DataBase231121.csv")
```

I will explore relation between Femur circumference and femur length. Thus, I will filter Avian and no-avian observations with information in both variables, then I will explore the variable distributions by group and by clades.

```{r}
# head 
head(data)

colnames(data)

#
Femurs <- data |> filter(!is.na(FemurCirc) & !is.na(FemurLen))

# Femur circumference
ggplot(Femurs, aes( FemurCirc)) +
  geom_histogram(aes( fill = Aves), alpha = 0.5)+
    facet_grid(Aves ~ ., scales = "free")

# Femur Lenght
ggplot(Femurs, aes( FemurLen)) +
  geom_histogram(aes( fill = Aves), alpha = 0.5)+
    facet_grid(Aves ~ ., scales = "free")


# Distribution Femur circumference and length

# classic plot :
ggplot(Femurs, aes(x=FemurLen, y=FemurCirc)) +
      geom_point(aes(color=Clade.1, shape = Aves)) +
  geom_smooth(aes(color =Aves), method = 'lm')+
  scale_color_viridis_d()
 

```

I want to predict Femur circumference for Palaeognathaes, then I will train a model using only only avian observations

![]()

```{r}
# Filter aves

Aves <- Femurs |> filter(Aves == 'Y')

head(Aves)
dim(Aves)
colnames(Aves)
# classic plot :
ggplot(Aves, aes(x=FemurLen, y=FemurCirc)) +
      geom_point(aes(color= Clade.2, shape = Clade.1)) +
  geom_smooth( method = 'lm')#+
  #scale_color_viridis_d()

```

## Fitting and checking models models

```{r}
# Linear model
Aveslm <- lm(FemurCirc ~ FemurLen,data = Aves)


# Linear log-log model
Avesloglog <- lm(log(FemurCirc) ~ log(FemurLen), data = Aves)


# Multiple linear regression Clade 1
AvesClade1 <- lm(FemurCirc ~ FemurLen + Clade.1, data = Aves)


# Multiple loglog linear regression Clade 1
AvesLogClade1 <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.1, data = Aves)


# Multiple linear regression Clade 2
AvesClade2 <- lm(FemurCirc ~ FemurLen + Clade.2, data = Aves)

# Multiple loglog linear regression Clade 2
AvesLogClade2 <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.2, data = Aves)

# Poly model 
Avespoly2 <- lm(FemurCirc ~ poly(FemurLen,2), data = Aves)


# Multiple Poly model Clade 1
Avespoly2Clade1 <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.1 , data = Aves)

# Multiple Poly model Clade 2
Avespoly2Clade2 <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.2, data = Aves)


#Aveslm,Avesloglog,AvesClade1,AvesLogClade1, AvesClade2,AvesLogClade2, Avespoly2, Avespoly2Clade1,Avespoly2Clade2

AIC(Aveslm,Avesloglog,AvesClade1,AvesLogClade1, AvesClade2,AvesLogClade2, Avespoly2, Avespoly2Clade1,Avespoly2Clade2)

```

Checking models for linearity

```{r}


#### LOOOCV

# Linear model
#Aveslm <- lm(FemurCirc ~ FemurLen,data = Aves)
Aveslm <-train(FemurCirc ~ FemurLen, data = Aves, method = "lm", trControl = ctrl)

# Linear log-log model
#Avesloglog <- lm(log(FemurCirc) ~ log(FemurLen), data = Aves)
Avesloglog <-train(log(FemurCirc) ~ log(FemurLen), data = Aves, method = "lm", trControl = ctrl)

# Multiple linear regression Clade 1
#AvesClade1 <- lm(FemurCirc ~ FemurLen + Clade.1, data = Aves)
AvesClade1 <- train(FemurCirc ~ FemurLen + Clade.1, data = Aves, method = "lm", trControl = ctrl)

# Multiple loglog linear regression Clade 1
# AvesLogClade1 <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.1, data = Aves)
AvesLogClade1 <-train(log(FemurCirc) ~ log(FemurLen) + Clade.1, data = Aves, method = "lm", trControl = ctrl)

# Multiple linear regression Clade 2
#AvesClade2 <- lm(FemurCirc ~ FemurLen + Clade.2, data = Aves)
AvesClade2 <- train(FemurCirc ~ FemurLen + Clade.2, data = Aves, method = "lm", trControl = ctrl)

# Multiple loglog linear regression Clade 2
#AvesLogClade2 <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.2, data = Aves)
AvesLogClade2 <-train(log(FemurCirc) ~ log(FemurLen) + Clade.2, data = Aves, method = "lm", trControl = ctrl)

# Poly model 
#Avespoly2 <- lm(FemurCirc ~ poly(FemurLen,2), data = Aves)
Avespoly2 <- train(FemurCirc ~ poly(FemurLen,2), data = Aves, method = "lm", trControl = ctrl)

# Multiple Poly model Clade 1
#Avespoly2Clade1 <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.1 , data = Aves)
Avespoly2Clade1 <-train(FemurCirc ~ poly(FemurLen,2) + Clade.1, data = Aves, method = "lm", trControl = ctrl)

# Multiple Poly model Clade 2
#Avespoly2Clade2 <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.2, data = Aves)
Avespoly2Clade2 <-train(FemurCirc ~ poly(FemurLen,2) + Clade.2, data = Aves, method = "lm", trControl = ctrl)




#specify the cross-validation method
ctrl <- trainControl(method = "LOOCV")

models <- c("Aveslm","Avesloglog","AvesClade1","AvesLogClade1", "AvesClade2","AvesLogClade2", "Avespoly2","Avespoly2Clade1","Avespoly2Clade2")


tab <- rbind(Aveslm[4][[1]],Avesloglog[4][[1]],AvesClade1[4][[1]],AvesLogClade1[4][[1]], AvesClade2[4][[1]],AvesLogClade2[4][[1]], Avespoly2[4][[1]], Avespoly2Clade1[4][[1]],Avespoly2Clade2[4][[1]])

tab <- cbind(models, tab)
 

tab2 <- tab |> pivot_longer(cols = 3:5,names_to = "Error", values_to = "Values")

ggplot(tab2, aes(y = Values)) +
  geom_point(aes(x = Error, color = models), position = 'jitter')+
  scale_colour_viridis_d()



```

### Prediction Femur circumference 

```{r}
# 
dim(Aves)
colnames(data)

clde <- levels(as.factor(Aves$Clade.2))
pred <- data |> 
  filter(Aves == "Y" & is.na(FemurCirc) & !is.na(FemurLen) & as.factor(Clade.2) %in% clde) 


levels(as.factor(pred$Clade.2))

pred2 <- pred |> mutate(FemurCirc = exp(predict(Avesloglog, newdata = pred[,c("FemurLen")])))

ggplot(pred2)+
  geom_point(aes(x = log(FemurLen), y = log(FemurCirc), color = Clade.1))+
  geom_point(data = Aves, aes(x=log(FemurLen), y=log(FemurCirc), color = Clade.1))
  
new <- rbind(data,pred2)
  
  


```

# Fitting a model to predict Body Mass

## Testing prediction
