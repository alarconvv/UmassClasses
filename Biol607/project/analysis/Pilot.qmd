---
title: "AnalysisPilot"
author: "Viviana Romero Alarcon"
format: html
editor: visual
---

# Predicting Femur circumference

### Data

```{r}
# load libraries
library(tidyverse)
library(ggExtra)
library(caret)

library(pacman)
pacman::p_load(dplyr,readr, ggplot2, broom, performance, here)

setwd(here::here())


# read data

data <- read_csv(file = "DataBase231129.csv")
data <- data |> filter(Sec_Ref != "Brinkworth_et_al_2023")
```

I will explore relation between Femur circumference and femur length. Thus, I will filter Avian and no-avian observations with information in both variables, then I will explore the variable distributions by group and by clades.

```{r}
# head 
head(data)

colnames(data)

#
Femurs <- data |> filter(!is.na(FemurCirc) & !is.na(FemurLen))

# Femur circumference
ggplot(Femurs, aes( FemurCirc)) +
  geom_histogram(aes( fill = Aves), alpha = 0.5) +
    facet_grid(Aves ~ ., scales = "free")

# Femur Lenght
ggplot(Femurs, aes( FemurLen)) +
  geom_histogram(aes( fill = Aves), alpha = 0.5)+
    facet_grid(Aves ~ ., scales = "free")


# Distribution Femur circumference and length

# classic plot :
ggplot(Femurs, aes(x=FemurLen, y=FemurCirc)) +
      geom_point(aes(color=Clade.1, shape = Aves)) +
  geom_smooth(aes(color =Aves), method = 'lm')+
  scale_color_viridis_d()
 

```

I want to predict Femur circumference for Palaeognathaes, then I will train a model using only only avian observations

![]()

```{r}
# Filter aves

Aves <- Femurs |> filter(Aves == 'Y')

head(Aves)
dim(Aves)
colnames(Aves)
# classic plot :
ggplot(Aves, aes(x=FemurLen, y=FemurCirc)) +
      geom_point(aes(color= Clade.2, shape = Clade.1)) +
  geom_smooth( method = 'lm')#+
  #scale_color_viridis_d()

# classic plot :
ggplot(Aves, aes(x=log(FemurLen), y=log(FemurCirc))) +
      geom_point(aes(color= Clade.1, shape = as.factor(Living))) +
  geom_smooth( method = 'lm')#+
  #scale_color_viridis_d()

```

## Fitting and checking models models

```{r}
# Linear model
Aveslm <- lm(FemurCirc ~ FemurLen,data = Aves)


# Linear log-log model
Avesloglog <- lm(log(FemurCirc) ~ log(FemurLen), data = Aves)


# Multiple linear regression Clade 1
AvesClade1 <- lm(FemurCirc ~ FemurLen + Clade.1, data = Aves)


# Multiple loglog linear regression Clade 1
AvesLogClade1 <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.1, data = Aves)


# Multiple linear regression Clade 2
AvesClade2 <- lm(FemurCirc ~ FemurLen + Clade.2, data = Aves)

# Multiple loglog linear regression Clade 2
AvesLogClade2 <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.2, data = Aves)

# Poly model 
Avespoly2 <- lm(FemurCirc ~ poly(FemurLen,2), data = Aves)


# Multiple Poly model Clade 1
Avespoly2Clade1 <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.1 , data = Aves)

# Multiple Poly model Clade 2
Avespoly2Clade2 <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.2, data = Aves)


#Aveslm,Avesloglog,AvesClade1,AvesLogClade1, AvesClade2,AvesLogClade2, Avespoly2, Avespoly2Clade1,Avespoly2Clade2

AIC(Aveslm,Avesloglog,AvesClade1,AvesLogClade1, AvesClade2,AvesLogClade2, Avespoly2, Avespoly2Clade1,Avespoly2Clade2)

```

Checking models for linearity

```{r}


#### LOOOCV

#specify the cross-validation method
ctrl <- trainControl(method = "LOOCV")

# Linear model
#Aveslm <- lm(FemurCirc ~ FemurLen,data = Aves)
Aveslm <-train(FemurCirc ~ FemurLen, data = Aves, method = "lm", trControl = ctrl)

# Linear log-log model
#Avesloglog <- lm(log(FemurCirc) ~ log(FemurLen), data = Aves)
Avesloglog <-train(log(FemurCirc) ~ log(FemurLen), data = Aves, method = "lm", trControl = ctrl)

# Multiple linear regression Clade 1
#AvesClade1 <- lm(FemurCirc ~ FemurLen + Clade.1, data = Aves)
AvesClade1 <- train(FemurCirc ~ FemurLen + Clade.1, data = Aves, method = "lm", trControl = ctrl)

# Multiple loglog linear regression Clade 1
# AvesLogClade1 <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.1, data = Aves)
AvesLogClade1 <-train(log(FemurCirc) ~ log(FemurLen) + Clade.1, data = Aves, method = "lm", trControl = ctrl)

# Multiple linear regression Clade 2
#AvesClade2 <- lm(FemurCirc ~ FemurLen + Clade.2, data = Aves)
AvesClade2 <- train(FemurCirc ~ FemurLen + Clade.2, data = Aves, method = "lm", trControl = ctrl)

# Multiple loglog linear regression Clade 2
#AvesLogClade2 <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.2, data = Aves)
AvesLogClade2 <-train(log(FemurCirc) ~ log(FemurLen) + Clade.2, data = Aves, method = "lm", trControl = ctrl)

# Poly model 
#Avespoly2 <- lm(FemurCirc ~ poly(FemurLen,2), data = Aves)
Avespoly2 <- train(FemurCirc ~ poly(FemurLen,2), data = Aves, method = "lm", trControl = ctrl)

# Multiple Poly model Clade 1
#Avespoly2Clade1 <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.1 , data = Aves)
Avespoly2Clade1 <-train(FemurCirc ~ poly(FemurLen,2) + Clade.1, data = Aves, method = "lm", trControl = ctrl)

# Multiple Poly model Clade 2
#Avespoly2Clade2 <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.2, data = Aves)
Avespoly2Clade2 <-train(FemurCirc ~ poly(FemurLen,2) + Clade.2, data = Aves, method = "lm", trControl = ctrl)






models <- c("Aveslm","Avesloglog","AvesClade1","AvesLogClade1", "AvesClade2","AvesLogClade2", "Avespoly2","Avespoly2Clade1","Avespoly2Clade2")


tab <- rbind(Aveslm[4][[1]],Avesloglog[4][[1]],AvesClade1[4][[1]],AvesLogClade1[4][[1]], AvesClade2[4][[1]],AvesLogClade2[4][[1]], Avespoly2[4][[1]], Avespoly2Clade1[4][[1]],Avespoly2Clade2[4][[1]])

tab <- cbind(models, tab)
 
tab

tab2 <- tab |> pivot_longer(cols = 3:5,names_to = "Error", values_to = "Values")

ggplot(tab2, aes(y = Values)) +
  geom_point(aes(x = Error, color = models), position = 'jitter')+
  scale_colour_viridis_d()



```

### Prediction Femur circumference

```{r}
# 
dim(Aves)
colnames(data)

clde <- levels(as.factor(Aves$Clade.2))

pred <- data |> 
  filter(Aves == "Y" & is.na(FemurCirc) & !is.na(FemurLen) & as.factor(Clade.2) %in% clde) 
#pred <- data |> 
  #filter(Aves == "Y" & is.na(FemurCirc) & !is.na(FemurLen)) 


data6 <- anti_join(data,pred)



predictions <- round(exp(predict(AvesLogClade2, newdata = pred[,c("FemurLen", "Clade.2")])),2)

pred2 <- pred |> mutate(FemurCirc = predictions, typeFC = rep("Predicted",nrow(pred))) 

data6 <- data6 |> mutate(typeFC = rep("Observation",nrow(data6)))

#
new <- rbind(data6,pred2)

ggplot(pred2)+
  geom_point(aes(x=log(FemurLen), y=log(FemurCirc), color = Clade.2), shape = 16)+
  geom_point(data = Aves, aes(x=log(FemurLen), y=log(FemurCirc), color = Clade.2))

  

ggplot(pred2)+
  geom_point(aes(x = FemurLen, y = FemurCirc, color = Clade.2), shape = 16)+
  geom_point(data = Aves, aes(x=FemurLen, y=FemurCirc, color = Clade.2))

ggplot(pred2)+
  geom_point(aes(x = FemurLen, y = FemurCirc, color = Clade.2), shape = 16)
  #geom_point(data = Aves, aes(x=FemurLen, y=FemurCirc, color = Clade.2))


```

# Predicting Body Mass

### Exploring

```{r}
# Femur circunference

# head 
head(data)

colnames(new)

#
BodyMassPrd <- new |> filter(!is.na(FemurCirc) & !is.na(BM.g))

# Femur circumference
ggplot(BodyMassPrd, aes( FemurCirc)) +
  geom_histogram(aes( fill = Aves), alpha = 0.5)+
    facet_grid(Aves ~ ., scales = "free")

# Femur Lenght
ggplot(BodyMassPrd, aes( BM.g)) +
  geom_histogram(aes( fill = Aves), alpha = 0.5)+
    facet_grid(Aves ~ ., scales = "free")


# Distribution Femur circumference and Body Mass Including predictions

# classic plot :
ggplot(BodyMassPrd, aes(x=FemurCirc, y=BM.g)) +
      geom_point(aes(color=Clade.1, shape = typeFC)) +
  geom_smooth(aes(color =Aves))+
  facet_grid(Aves ~ .)
  scale_color_viridis_d()
  
  ggplot(BodyMassPrd, aes(x=FemurCirc, y=BM.g)) +
      geom_point(aes(color=Clade.1, shape = typeFC)) +
  geom_smooth(aes(color =Aves))+
  facet_grid(Aves ~ ., scales = 'free')
  
  ####### No predictions in FC
  
  
#
BodyMassObs <- new |> filter(!is.na(FemurCirc) & !is.na(BM.g) & typeFC == "Observation")

# Femur circumference
ggplot(BodyMassObs, aes( FemurCirc)) +
  geom_histogram(aes( fill = Aves), alpha = 0.5)+
    facet_grid(Aves ~ ., scales = "free")

# Femur Lenght
ggplot(BodyMassObs, aes( BM.g)) +
  geom_histogram(aes( fill = Aves), alpha = 0.5)+
    facet_grid(Aves ~ ., scales = "free")


# Distribution Femur circumference and Body Mass Including predictions

# classic plot :
ggplot(BodyMassObs, aes(x=FemurCirc, y=BM.g)) +
      geom_point(aes(color=Clade.1, shape = Method)) +
  geom_smooth(aes(color =Aves))+
  facet_grid(Aves ~ .)+
  scale_color_viridis_d()
  
  ggplot(BodyMassObs, aes(x=FemurCirc, y=BM.g)) +
      geom_point(aes(color=Clade.1,shape = Method)) +
  geom_smooth(aes(color =Aves))+
  facet_grid(Aves ~ ., scales = 'free')
  scale_color_viridis_d()
  
```

## Fitting models

```{r}

BMavesPrd <- BodyMassPrd |> filter(Aves == "Y" )
colnames(BMavesPrd)
ggplot(BMavesPrd|> filter(Clade.1 == "Palaeognathae"), aes(x=FemurCirc, y= BM.g)) +
      geom_point(aes(color=Taxon, shape = typeFC)) +
  geom_smooth()

#### LOOOCV

#specify the cross-validation method
ctrl <- trainControl(method = "LOOCV")

# Linear model
BMlmPrd <- lm(BM.g ~ FemurCirc,data = BMavesPrd)
BMlmCVPrd <-train(BM.g ~ FemurCirc, data = BMavesPrd, method = "lm", trControl = ctrl)



# Linear log-log model
BMloglogPrd <- lm(log(BM.g) ~ log(FemurCirc), data = BMavesPrd)
BMloglogCVPrd <-train(log(BM.g) ~ log(FemurCirc), data = BMavesPrd, method = "lm", trControl = ctrl)
summary(BMloglogCVPrd)


# Multiple loglog linear regression Clade 2
BMlogClade2Prd <- lm(log(BM.g) ~ log(FemurCirc) + Clade.2, data = BMavesPrd)
BMlogClade2CVPrd <-train(log(BM.g) ~ log(FemurCirc) + Clade.2, data = BMavesPrd, method = "lm", trControl = ctrl)

# Poly model 
BMpolyPrd <- lm(BM.g ~ poly(FemurCirc, 2), data = BMavesPrd)
BMpolyCVPrd <-train(BM.g ~ poly(FemurCirc,2) , data = BMavesPrd, method = "lm", trControl = ctrl)

library(splines)
BMSplinePrd <- lm(BM.g ~bs(FemurCirc, knots = 50), data = BMavesPrd)
BMSplineCVPrd <- train(BM.g ~bs(FemurCirc, knots = 50), data = BMavesPrd, method = "lm", trControl = ctrl)



AIC(BMlmPrd,BMloglogPrd,BMlogClade2Prd, BMpolyPrd, BMSplinePrd)

models <- c("BMlmPrd","BMloglogPrd","BMlogClade2Prd", "BMpolyPrd", "BMSplinePrd")


tabPrd <- rbind(BMlmCVPrd[4][[1]],BMloglogCVPrd[4][[1]],BMlogClade2CVPrd[4][[1]], BMpolyCVPrd[4][[1]], BMSplineCVPrd[4][[1]])

tabPrd <- cbind(models, tabPrd)
 tabPrd

tab2Prd <- tabPrd |> pivot_longer(cols = 3:5,names_to = "Error", values_to = "Values")

ggplot(tab2Prd , aes(y = Values)) +
  geom_point(aes(x = Error, color = models), position = 'jitter')+
  scale_colour_viridis_d()
```

```{r}
#
BodyMassObs <- new |> filter(!is.na(FemurCirc) & !is.na(BM.g) & typeFC == "Observation")

BMavesObs <- BodyMassObs |> filter(Aves == "Y" )

ggplot(BMavesObs, aes(x=FemurCirc, y= BM.g)) +
      geom_point(aes(color=Clade.1, shape = typeFC)) +
  geom_smooth()

#### LOOOCV

#specify the cross-validation method
ctrl <- trainControl(method = "LOOCV")

# Linear model
BMlmObs <- lm(BM.g ~ FemurCirc,data = BMavesObs)
BMlmCVObs <-train(BM.g ~ FemurCirc, data = BMavesObs, method = "lm", trControl = ctrl)

# Linear log-log model
BMloglogObs <- lm(log(BM.g) ~ log(FemurCirc), data = BMavesObs)
BMloglogCVObs <-train(log(BM.g) ~ log(FemurCirc), data = BMavesObs, method = "lm", trControl = ctrl)
summary()

# Multiple loglog linear regression Clade 2
BMlogClade2Obs <- lm(log(BM.g) ~ log(FemurCirc) + Clade.2, data = BMavesObs)
BMlogClade2CVObs <-train(log(BM.g) ~ log(FemurCirc) + Clade.2, data = BMavesObs, method = "lm", trControl = ctrl)

# Poly model 
BMpolyObs <- lm(BM.g ~ poly(FemurCirc, 2), data = BMavesObs)
BMpolyCVObs <-train(BM.g ~ poly(FemurCirc,2) , data = BMavesObs, method = "lm", trControl = ctrl)

library(splines)
BMSplineObs <- lm(BM.g ~bs(FemurCirc, knots = 35), data = BMavesObs)
BMSplineCVObs <- train(BM.g ~bs(FemurCirc, knots = 35), data = BMavesObs, method = "lm", trControl = ctrl)



AIC(BMlmObs,BMloglogObs,BMlogClade2Obs, BMpolyObs, BMSplineObs)

models <- c("BMlmObs","BMloglogObs","BMlogClade2Obs", "BMpolyObs", "BMSplineObs")


tabObs <- rbind(BMlmCVObs[4][[1]],BMloglogCVObs[4][[1]],BMlogClade2CVObs[4][[1]], BMpolyCVObs[4][[1]], BMSplineCVObs[4][[1]])

tabObs <- cbind(models, tabObs)

both <-rbind(tabObs, tabPrd)
both

tab2Obs <- tabObs |> pivot_longer(cols = 3:5,names_to = "Error", values_to = "Values")

ggplot(tab2Obs, aes(y = Values)) +
  geom_point(aes(x = Error, color = models), position = 'jitter')+
  scale_colour_viridis_d()


```

## Tarsus vr sex

```{r}

 colnames(new)
 
 AvesSex <- new |> filter(Aves == "Y" & !is.na(Sex) &
                            !is.na(BM.g) &
                            !is.na(HumerusLen) &
                            !is.na(HumerusCirc) &
                            !is.na(FemurCirc) &
                            !is.na(FemurLen) &
                            !is.na(TibulaLen) &
                          !is.na(TarsusLen) &
                            !is.na(TarusCirc))
 
 ggplot(AvesSex, aes(x = Clade.2, y =HumerusLen)) +
   geom_boxplot(aes(color= Sex))
 
 ggplot(AvesSex, aes(y = Sex, x = BM.g)) +
   geom_point(aes(color= Sex))
```
