---
title: "Pipes"
author: "Viviana Romero Alarcon"
format: html
editor: visual
---

### **Manipulating, analyzing and exporting data with tidyverse**

```{r}
download.file(url = "https://ndownloader.figshare.com/files/2292169",
              destfile = "portal_data_joined.csv")

## load the tidyverse packages, incl. dplyr
library(tidyverse)

surveys <- read_csv("portal_data_joined.csv")
```

See the structure and explore raw data

```{r}

str(surveys)
view(surveys)
head(surveys)
```

### Selecting columns

select() is a function to choose or exclude columns

```{r}
# Choose columns

select(surveys, plot_id, species_id, weight)
# or

surveys |> select(plot_id, species_id, weight)

# or exclude

select(surveys, -record_id, -species_id)
# or

surveys |> select(plot_id, -record_id, -species_id)


```

select() is to choose columns. But filter() will choose with a specific criterion

```{r}
filter(surveys, year == 1995)

#or

surveys |> 
  filter(year == 1995)


```

### pipes

We can create a temporaty data frame and use this for the next step. That is a pipe

```{r}
surveys2 <- filter(surveys, weight < 5)
survey_sml <- select(surveys2, species_id, sex, weight)

#or

survey_sml <- select(filter(surveys, weight < 5), species_id, sex, weight)

#or

survey_sml <- surveys |>
  filter(weight < 5) |>
  select(species_id, sex, weight)


```

Exercise

Using pipes, subset the `surveys` data to include animals collected before 1995 and retain only the columns `year`, `sex`, and `weight`.

```{r}
surveys |>
  filter(year < 1995) |>
  select(year, sex, weight)

```

### Mutate

Mutate() uis useful to create new columns based on values in existing columns.

```{r}
surveys |>
  mutate(weight_Kg = weight / 10000)

```

you can also create a second column based on the first new column.

```{r}
surveys |>
  mutate(weight_kg = weight / 1000,
         weight_lb = weight_kg * 2.2)

```

The first rows of the output are full of NAs

```{r}
surveys |>
  filter(!is.na(weight)) |>
  mutate(weight_kg = weight / 1000) |>
  head()
```

Exercise

Create a new data frame from the `surveys` data that meets the following criteria: contains only the `species_id` column and a new column called `C` containing the `hindfoot_length` values (currently in mm) converted to centimeters. In this `hindfoot_cm` column, there are no `NA`s and all values are less than 3.

```{r}
surveys |> 
  mutate(hindfoot_cm = hindfoot_length/100 ) |>
  filter(!is.na(hindfoot_cm)) |>
  select(species_id)
  
```

**Hint**: think about how the commands should be ordered to produce this data frame!

### Grouping and summarize

group by () is used together with summarize(). it is used to collapse every gruop.

```{r}
surveys |>
  group_by(sex) |>
  summarize(mean_weight = mean(weight, na.rm = T))
```

you can also grouped by multiple columns

```{r}
surveys |>
  group_by(sex, species_id) |>
  summarise(mean_weight = mean(weight, na.rm = T))|>
  tail()
```

We can use na.rm to calculate the mean. So the estimation will made without NA but that does not mean it would remove NA. The we should filter ans delete them.

```{r}
surveys |>
  filter(!is.na(weight)) |>
  group_by(sex, species_id) |>
  summarize(mean_weight = mean(weight))|>  print(n= 5)
# similar to head you can use print to get only few rows

```

We can also summarise multiple variables at the same time

```{r}
surveys |>
   filter(!is.na(weight)) |>
  group_by(sex, species_id) |>
  summarize( mean_weight = mean(weight),
             min_weight = min(weight))
```

We can sort at the end using any columns

```{r}
# ascending
surveys %>%
  filter(!is.na(weight)) %>%
  group_by(sex, species_id) %>%
  summarize(mean_weight = mean(weight),
            min_weight = min(weight)) %>%
  arrange(min_weight)

# or descending

surveys %>%
  filter(!is.na(weight)) %>%
  group_by(sex, species_id) %>%
  summarize(mean_weight = mean(weight),
            min_weight = min(weight)) %>%
  arrange(desc(mean_weight))
```

### Counting

count give us the length or the number of observation for a determined group,

```{r}
surveys |>
  count(sex, sort = TRUE)
```

or we can use n function inside summarize

```{r}
surveys |> 
  group_by(sex) |>
  summarize(counts = n())
```

```{r}
surveys %>%
  count(sex, species,sort = T)
```

```{r}
surveys %>%
  count(sex, species) %>%
  arrange(species, desc(n))
```

Exercise

1.  How many animals were caught in each `plot_type` surveyed?

    ```{r}
    surveys|>
      count(plot_type)
    ```

exercises

2.  Use `group_by()` and `summarize()` to find the mean, min, and max hindfoot length for each species (using `species_id`). Also add the number of observations (hint: see `?n`).

```{r}
colnames(surveys)

surveys|>
    filter(!is.na(species_id) & !is.na(hindfoot_length) ) |>
  group_by(species_id) |>
  summarize(mean_hl = mean(hindfoot_length),
            min_hl = min(hindfoot_length),
            max_hl = max(hindfoot_length),
            counting = n())
```

Exercise

3.  What was the heaviest animal measured in each year? Return the columns `year`, `genus`, `species_id`, and `weight`.

    ```{r}
    surveys |> 
      filter(!is.na(weight)) |>
      group_by(year) |>
      filter(weight == max(weight)) |>
        select(year, genus, species_id, weight) 
      
    ```

### Reshaping with pivot_longer and pivot_wider

#### long to wide

pivot_wider()

transform the data from few to many columns

```{r}
surveys_gw <- surveys %>%
  filter(!is.na(weight)) %>%
  group_by(plot_id, genus) %>%
  summarize(mean_weight = mean(weight))

str(surveys_gw)


surveys_wide <-surveys_gw %>%
  pivot_wider(names_from = genus, values_from = mean_weight, values_fill = 0) %>%
  head()

```

In contrast, to transform from many columns to few ones

```{r}
surveys_long <- surveys_wide %>%
  pivot_longer(names_to = "genus", values_to = "mean_weight", cols = -plot_id)

str(surveys_long)
```

Exercise

1.  Reshape the `surveys` data frame with `year` as columns, `plot_id` as rows, and the number of genera per plot as the values. You will need to summarize before reshaping, and use the function `n_distinct()` to get the number of unique genera within a particular chunk of data. It's a powerful function! See `?n_distinct` for more.

    ```{r}
    surveys_wide_genera <- surveys %>%
      group_by(plot_id, year) %>%
      summarize(n_genera = n_distinct(genus)) %>%
      pivot_wider(names_from = year, values_from = n_genera)
      
      
    ```

```{=html}
<!-- -->
```
2.  Now take that data frame and `pivot_longer()` it, so each row is a unique `plot_id` by `year` combination.

    ```{r}
    surveys_wide_genera |> pivot_longer(names_to = "year", values_to = "n_genera", cols = -plot_id)
    ```

```{=html}
<!-- -->
```
3.  The `surveys` data set has two measurement columns: `hindfoot_length` and `weight`. This makes it difficult to do things like look at the relationship between mean values of each measurement per year in different plot types. Let\'s walk through a common solution for this type of problem. First, use `pivot_longer()` to create a dataset where we have a names column called `measurement` and a `value` column that takes on the value of either `hindfoot_length` or `weight`. *Hint*: You\'ll need to specify which columns will be part of the reshape.

```{r}
surveys |> 
  filter(!is.na(hindfoot_length)) |> 
  filter(!is.na(weight)) |> 
  group_by(year) |>
  summarize( mean_hl = mean(hindfoot_length),
             mean_w = mean(weight)) |>
  pivot_longer(names_to = 'value',
               values_to = "measurement", cols = -year)
  
```

```{r}
surveys_long <- surveys %>%
  pivot_longer(names_to = "measurement", values_to = "value", cols = c(hindfoot_length, weight))

surveys_long %>%
  group_by(year, measurement, plot_type) %>%
  summarize(mean_value = mean(value, na.rm=TRUE)) %>%
  pivot_wider(names_from = measurement, values_from = mean_value)
```
