---
title: "Body Mass in Non-avian Dinosaurs"
author: "Viviana Romero Alarcon"
format: html
editor: visual
---

```{r}
# load libraries

set.seed(999)
library(pacman)
pacman::p_load(caret,tidyverse,dplyr,readr, ggplot2, broom, performance, here)




# read data

data <- read_csv(file = "DataBase231129.csv")
data <- data |> filter(Sec_Ref != "Brinkworth_et_al_2023")



```

I will explore how the distribution looks in each variables: Body mass, Femur circumference and Femur Length

```{r}
colnames(data)
distributions <- data |> dplyr::select(Clade.1, Clade.2, Taxon, Aves,BM.g, FemurCirc, FemurLen, Aves, Living) |>
  pivot_longer(cols = c(FemurCirc, FemurLen), names_to = "Covars",values_to = "vals")


# Femur lenght distribution

ggplot(distributions, aes(x = vals, y = BM.g)) +
  geom_point(aes( color = Clade.1, shape = as.factor(Living)), alpha = 0.5) +
  facet_wrap(Aves ~ Covars, scales = 'free')
```

### Femur Circumference prediction

```{r}
# Filter data to use: 

colnames(data)

avesFCFL <- data |> filter( Aves == "Y" & !is.na(FemurCirc) & !is.na(FemurLen))

# Training and testing sets


sample.test <-c(sample(x = 1:nrow(avesFCFL),size = ceiling(nrow(avesFCFL)* 0.2)),which(avesFCFL$Clade.2 =="Sphenisciformes"))

avesFCFL.test <- avesFCFL[sample.test,]
avesFCFL.train <- avesFCFL[-sample(x = 1:nrow(avesFCFL),size = ceiling(nrow(avesFCFL)* 0.2)),]

# Femur Circumference distribution
ggplot(avesFCFL) +
      geom_histogram(aes( x=FemurCirc, fill= Clade.1))

# Femur Length distribution
ggplot(avesFCFL) +
      geom_histogram(aes( x=FemurLen, fill= Clade.1))

# Plot FC ~ FL

ggplot(avesFCFL, aes(x=FemurLen, y=FemurCirc)) +
      geom_point(aes(color= Clade.1, shape = as.factor(Living)))

```

## Fitting models

```{r}
# Fit lineal model
lm_FC <- lm(FemurCirc ~ FemurLen, data = avesFCFL.train)

# Fit loglog model
loglog_FC <- lm(log(FemurCirc) ~ log(FemurLen), data = avesFCFL.train)

# Multiple linear regression Clade 1
lmClade1_FC <- lm(FemurCirc ~ FemurLen + Clade.1, data = avesFCFL.train)


# Multiple loglog linear regression Clade 1
logClade1_FC <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.1, data = avesFCFL.train)


# Multiple linear regression Clade 2
lmClade2_FC <- lm(FemurCirc ~ FemurLen + Clade.2, data = avesFCFL.train)

# Multiple loglog linear regression Clade 2
logClade2_FC <- lm(log(FemurCirc) ~ log(FemurLen) + Clade.2, data = avesFCFL.train)

# Poly model 
poly2_FC <- lm(FemurCirc ~ poly(FemurLen,2), data = avesFCFL.train)


# Multiple Poly model Clade 1
poly2Clade1_FC <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.1 , data = avesFCFL.train)

# Multiple Poly model Clade 2
poly2Clade2_FC <- lm(FemurCirc ~ poly(FemurLen,2) + Clade.2, data = avesFCFL.train)

cbind(AIC(lm_FC, lmClade1_FC, lmClade2_FC, loglog_FC,logClade1_FC, logClade2_FC, poly2_FC, poly2Clade1_FC,poly2Clade2_FC ), adjR2 = c(0.9243, 0.9243, 0.96,0.9685, 0.9701, 0.9849, 0.9712, 0.9712,0.9794 ) )

summary(poly2Clade2_FC)

# Fit values

fitvals_FC.train <- data.frame(FemurLen = avesFCFL.train$FemurLen, 
                         trueFC = avesFCFL.train$FemurCirc,
                         lm_FC = lm_FC$fitted.values, 
                         loglog_FC = exp(loglog_FC$fitted.values),
                         lmClade1_FC = lmClade1_FC$fitted.values,
                         logClade1_FC = exp(logClade1_FC$fitted.values),
                         lmClade2_FC = lmClade2_FC$fitted.values,
                         logClade2_FC = exp(logClade2_FC$fitted.values),
                         poly2_FC = poly2_FC$fitted.values,
                         poly2Clade1_FC = poly2Clade1_FC$fitted.values,
                         poly2Clade2_FC = poly2Clade2_FC$fitted.values)


fitvals_FC.long <- fitvals_FC.train %>% pivot_longer(-FemurLen, names_to = 'model', values_to = 'FemurCirc')

ggplot(data = fitvals_FC.long) +
  geom_line(aes(x = FemurLen, y = FemurCirc, color = model)) +
  geom_point(data = avesFCFL.train, aes(x=FemurLen, y=FemurCirc), size = 0.5, alpha = 1, color = 'darkblue') 

```

Estimating MSE

```{r}

n <- length(avesFCFL.train$FemurLen)
lm_FC.MSE.train <- 1/n * sum((avesFCFL.train$FemurCirc - lm_FC$fitted.values)^2) 
loglog_FC.MSE.train <- 1/n * sum((log(avesFCFL.train$FemurCirc) - loglog_FC$fitted.values)^2)
lmClade1_FC.MSE.train <- 1/n * sum((avesFCFL.train$FemurCirc - lmClade1_FC$fitted.values)^2)
logClade1_FC.MSE.train <- 1/n * sum((log(avesFCFL.train$FemurCirc) - logClade1_FC$fitted.values)^2)
lmClade2_FC.MSE.train <- 1/n * sum((avesFCFL.train$FemurCirc - lmClade2_FC$fitted.values)^2)
logClade2_FC.MSE.train <- 1/n * sum((log(avesFCFL.train$FemurCirc) - logClade2_FC$fitted.values)^2)
poly2_FC.MSE.train <- 1/n * sum((avesFCFL.train$FemurCirc - poly2_FC$fitted.values)^2)
poly2Clade1_FC.MSE.train <- 1/n * sum((avesFCFL.train$FemurCirc - poly2Clade1_FC$fitted.values)^2)
poly2Clade2_FC.MSE.train <- 1/n * sum((avesFCFL.train$FemurCirc - poly2Clade2_FC$fitted.values)^2)

MSE.train <- data.frame(type = 'train', lm_FC = lm_FC.MSE.train, 
                        loglog_FC =loglog_FC.MSE.train,
                        lmClade1_FC = lmClade1_FC.MSE.train,
                        logClade1_FC = logClade1_FC.MSE.train,
                        lmClade2_FC = lmClade2_FC.MSE.train,
                       logClade2_FC = logClade2_FC.MSE.train,
                        poly2_FC =poly2_FC.MSE.train,
                        poly2Clade1_FC = poly2Clade1_FC.MSE.train,
                        poly2Clade2_FC = poly2Clade2_FC.MSE.train)
```

### Prediction: test dataset

```{r}

lm_FC.prd <- predict(lm_FC, newdata = data.frame(FemurLen = avesFCFL.test$FemurLen))
loglog_FC.prd <- predict(loglog_FC, newdata = data.frame(FemurLen = log(avesFCFL.test$FemurLen)))
lmClade1_FC.prd <- predict(lmClade1_FC, 
                           newdata = data.frame(FemurLen = avesFCFL.test$FemurLen,
                                                Clade.1= avesFCFL.test$Clade.1))
logClade1_FC.prd <- predict(logClade1_FC, newdata = data.frame(FemurLen = log(avesFCFL.test$FemurLen),
                                                Clade.1= avesFCFL.test$Clade.1))
lmClade2_FC.prd <- predict(lmClade2_FC, newdata = data.frame(FemurLen = avesFCFL.test$FemurLen,
                                                Clade.2= avesFCFL.test$Clade.2))
logClade2_FC.prd <- predict(logClade2_FC, newdata = data.frame(FemurLen = log(avesFCFL.test$FemurLen),
                                                Clade.2= avesFCFL.test$Clade.2))
poly2_FC.prd <- predict(poly2_FC, newdata = data.frame(FemurLen = avesFCFL.test$FemurLen))
poly2Clade1_FC.prd <- predict(poly2Clade1_FC, newdata = data.frame(FemurLen = avesFCFL.test$FemurLen,
                                                Clade.1= avesFCFL.test$Clade.1))
poly2Clade2_FC.prd <- predict(poly2Clade2_FC, newdata = data.frame(FemurLen = avesFCFL.test$FemurLen,
                                                Clade.2= avesFCFL.test$Clade.2))
```

### Mean Standard Error Training vr Test

```{r}
n <- length(avesFCFL.test$FemurLen)

lm_FC.MSE.test <- 1/n * sum((avesFCFL.test$FemurCirc - lm_FC.prd)^2) 
loglog_FC.MSE.test <- 1/n * sum((log(avesFCFL.test$FemurCirc) - loglog_FC.prd)^2)
lmClade1_FC.MSE.test <- 1/n * sum((avesFCFL.test$FemurCirc - lmClade1_FC.prd)^2)
logClade1_FC.MSE.test <- 1/n * sum((log(avesFCFL.test$FemurCirc) - logClade1_FC.prd)^2)
lmClade2_FC.MSE.test <- 1/n * sum((avesFCFL.test$FemurCirc - lmClade2_FC.prd)^2)
logClade2_FC.MSE.test <- 1/n * sum((log(avesFCFL.test$FemurCirc) - logClade2_FC.prd)^2)
poly2_FC.MSE.test <- 1/n * sum((avesFCFL.test$FemurCirc - poly2_FC.prd)^2)
poly2Clade1_FC.MSE.test <- 1/n * sum((avesFCFL.test$FemurCirc - poly2Clade1_FC.prd)^2)
poly2Clade2_FC.MSE.test <- 1/n * sum((avesFCFL.test$FemurCirc - poly2Clade2_FC.prd)^2)

MSE.test <- data.frame(type = 'test', lm_FC = lm_FC.MSE.test, 
                        loglog_FC = loglog_FC.MSE.test,
                        lmClade1_FC = lmClade1_FC.MSE.test,
                        logClade1_FC = logClade1_FC.MSE.test,
                        lmClade2_FC = lmClade2_FC.MSE.test,
                        logClade2_FC = logClade2_FC.MSE.test,
                        poly2_FC = poly2_FC.MSE.test,
                        poly2Clade1_FC = poly2Clade1_FC.MSE.test,
                        poly2Clade2_FC = poly2Clade2_FC.MSE.test)


MSE <- rbind(MSE.train, MSE.test)

MSE 

MSE.long <- MSE %>% pivot_longer(-type, names_to = 'model', values_to = 'MSE')


levels(as.factor(MSE.long$model))
 MSE.long$model <- factor(MSE.long$model, 
                           levels = c("lm_FC","lmClade1_FC","lmClade2_FC","loglog_FC","logClade1_FC","logClade2_FC","poly2_FC","poly2Clade1_FC","poly2Clade2_FC"
                                      ))


ggplot(data = MSE.long, aes(x = model, y = MSE)) +
  geom_line(aes(group = type, color = type) )+ 
  geom_point(aes(color = model))
  



```

### Repeated k-fold Cross Validation

```{r}
# No test dataset is necessary

train.control <- trainControl(method = "repeatedcv", 
                              number = 20, repeats = 10)


# Fit lineal model
lm_FC <- train(FemurCirc ~ FemurLen, data = avesFCFL, method = "lm",
               trControl = train.control)

# Fit loglog model
loglog_FC <- train(log(FemurCirc) ~ log(FemurLen), data = avesFCFL, method = "lm",
               trControl = train.control)

# Multiple linear regression Clade 1
lmClade1_FC <- train(FemurCirc ~ FemurLen + Clade.1,data = avesFCFL, method = "lm",
               trControl = train.control)


# Multiple loglog linear regression Clade 1
logClade1_FC <- train(log(FemurCirc) ~ log(FemurLen) + Clade.1, data = avesFCFL, method = "lm",
               trControl = train.control)


# Multiple linear regression Clade 2
lmClade2_FC <- train(FemurCirc ~ FemurLen + Clade.2, data = avesFCFL, method = "lm",
               trControl = train.control)

# Multiple loglog linear regression Clade 2
logClade2_FC <- train(log(FemurCirc) ~ log(FemurLen) + Clade.2, data = avesFCFL, method = "lm",
               trControl = train.control)

# Poly model 
poly2_FC <- train(FemurCirc ~ poly(FemurLen,2), data = avesFCFL, method = "lm",
               trControl = train.control)


# Multiple Poly model Clade 1
poly2Clade1_FC <- train(FemurCirc ~ poly(FemurLen,2) + Clade.1 , data = avesFCFL, method = "lm",
               trControl = train.control)

# Multiple Poly model Clade 2
poly2Clade2_FC <- train(FemurCirc ~ poly(FemurLen,2) + Clade.2, data = avesFCFL, method = "lm",
               trControl = train.control)


MAE <- data.frame(type = 'cv', lm_FC = lm_FC$results$MAE, 
                        loglog_FC = loglog_FC$results$MAE,
                        lmClade1_FC = lmClade1_FC$results$MAE,
                        logClade1_FC = logClade1_FC$results$MAE,
                        lmClade2_FC = lmClade2_FC$results$MAE,
                        logClade2_FC = logClade2_FC$results$MAE,
                        poly2_FC = poly2_FC$results$MAE,
                        poly2Clade1_FC = poly2Clade1_FC$results$MAE,
                        poly2Clade2_FC = poly2Clade2_FC$results$MAE)

MAE.long <- MAE %>% pivot_longer(-type, names_to = 'model', values_to = 'MAE')

ggplot(data = MAE.long, aes(x = model, y = MAE)) +
  geom_line(aes(group = type, color = type) )+ 
  geom_point(aes(color = model))

```

# Selecting model

```{r}

# Check model selected 

logClade2_FC <- lm(log(FemurCirc) ~ log(FemurLen) , data = avesFCFL)

summary(logClade2_FC)

check_model(logClade2_FC)

poly2_FC<- lm(FemurCirc ~ poly(FemurLen,2) , data = avesFCFL)

summary(poly2_FC)

check_model(poly2_FC)


poly2Clade2_FC<- lm(FemurCirc ~ poly(FemurLen,2) + Clade.2 , data = avesFCFL)

summary(poly2Clade2_FC)

check_model(poly2Clade2_FC)

AIC(logClade2_FC, poly2_FC, poly2Clade2_FC)

ggplot(avesFCFL, aes(x = log(FemurLen)))+
  geom_point(aes(y= log(BM.g), color = Clade.2), alpha = 0.5, size = 0.7)+
  geom_smooth(aes(y= log(BM.g)), method = 'lm')

```

### Predicting Femur circumference

```{r}
dim(avesFCFL)
colnames(avesFCFL)

clde <- levels(as.factor(avesFCFL$Clade.2))

pred <- data |> 
  filter(Aves == "Y" & is.na(FemurCirc) & !is.na(FemurLen) & as.factor(Clade.2) %in% clde) 
#pred <- data |> 
  #filter(Aves == "Y" & is.na(FemurCirc) & !is.na(FemurLen)) 


data6 <- anti_join(data,pred)



predictions <- round(exp(predict(logClade2_FC, newdata = pred[,c("FemurLen", "Clade.2")])),2)

pred2 <- pred |> mutate(FemurCirc = predictions, typeFC = rep("Predicted",nrow(pred))) 

data6 <- data6 |> mutate(typeFC = rep("Observation",nrow(data6)))

#
new <- rbind(data6,pred2)


ggplot(avesFCFL)+
  geom_point(data = , aes(x=log(FemurLen), y=log(FemurCirc), color = Clade.2),
              alpha = 0.3, size = 0.7, shape = 16) +
  geom_point(data = pred2,aes(x=log(FemurLen), y=log(FemurCirc), color = Clade.2), size = 0.7)




  
```

# Predicting Body Mass

```{r}
levels(as.factor(new$Sec_Ref))

newAves <-new |> filter(Aves == "Y") |> mutate(Ref = ifelse( Sec_Ref == "Campione_et_al_(2014)", "Campione_et_al_2014", ifelse( Sec_Ref == "Field_et_al_(2013)","Field_et_al_2013", ifelse( typeFC == "Predicted", "NewSource", "NewSource")))) |> filter(!is.na(BM.g) & !is.na(FemurCirc))




# Plot FC ~ FL


ggplot(newAves, aes(x = FemurCirc, y = BM.g)) +
  geom_point(aes( color = Ref, shape = Clade.1)) +
  geom_smooth(color = "darkgray", alpha = 0.5, size = 0.5)+
  facet_grid(Ref ~ .)


ggplot(newAves, aes(x = FemurCirc, y = BM.g)) +
  geom_point(aes( color = Ref, shape = Clade.1)) +
  geom_smooth(color = "darkgray", alpha = 0.5, size = 0.5)+
  facet_grid(Clade.1 ~ .)

ggplot(new , aes(x = FemurCirc, y = BM.g)) +
  geom_point(aes(  color = Clade.1, shape =Method)) +
  geom_smooth(color = "darkgray", alpha = 0.5, size = 0.5)+
  facet_grid(Aves~., scales = 'free')

# Femur Circumference distribution
ggplot(newAves) +
      geom_histogram(aes( x=FemurCirc, fill= Clade.1))

# Femur Length distribution
ggplot(newAves) +
      geom_histogram(aes( x=BM.g, fill= Clade.1))






```

### datasets

```{r}
# Training and testing sets


sample.test <-sample(x = 1:nrow(newAves),size = ceiling(nrow(newAves)* 0.2))

avesFCBM.test <- newAves[sample.test,]
avesFCBM.train <- newAves[-sample.test,]
 dim(avesFCBM.train)

# Fit lineal model
lm_BM <- lm(BM.g ~FemurCirc, data = avesFCBM.train)

# Fit loglog model
loglog_BM <- lm(log(BM.g) ~ log(FemurCirc), data = avesFCBM.train)

# Poly 2 model 
poly2_BM <- lm(BM.g ~ poly(FemurCirc,2), data = avesFCBM.train)

# Poly 2 model 
poly3_BM <- lm(BM.g ~ poly(FemurCirc,3), data = avesFCBM.train)

# Spline model 1 knots
library(splines)
Spline_BM1 <- lm(BM.g ~bs(FemurCirc, knots = 50), data = avesFCBM.train)

# Spline model 2 knots
Spline_BM2 <- lm(BM.g ~ bs(FemurCirc, knots = c(35, 50)), data = avesFCBM.train)


# Fit values
fitvals_BM.train <- data.frame(FemurCirc = avesFCBM.train$FemurCirc, 
                         trueBM = avesFCBM.train$BM.g,
                         lm_BM = lm_BM$fitted.values, 
                         loglog_BM = exp(loglog_BM$fitted.values),
                         poly2_BM = poly2_BM$fitted.values,
                         poly3_BM = poly3_BM$fitted.values,
                         Spline_BM1 = Spline_BM1$fitted.values,
                         Spline_BM2 = Spline_BM2$fitted.values)


fitvals_BM.long <- fitvals_BM.train %>% pivot_longer(-FemurCirc, names_to = 'model', values_to = 'BM')

ggplot(data = fitvals_BM.long) +
  geom_line(aes(y = BM, x = FemurCirc, color = model)) +
  geom_point(data = avesFCBM.train, aes(y=BM.g, x=FemurCirc), size = 0.5, alpha = 1, color = 'darkblue') 


```

### MSE training data

```{r}
n <- length(avesFCBM.train$BM.g)



lm_BM.MSE.train <- 1/n * sum((avesFCBM.train$BM.g - lm_BM$fitted.values)^2) 
loglog_BM.MSE.train <- 1/n * sum((log(avesFCBM.train$BM.g) - loglog_BM$fitted.values)^2)
poly2_BM.MSE.train <- 1/n * sum((avesFCBM.train$BM.g - poly2_BM$fitted.values)^2)
poly3_BM.MSE.train <- 1/n * sum((avesFCBM.train$BM.g - poly3_BM$fitted.values)^2)
Spline_BM1.MSE.train <- 1/n * sum((avesFCBM.train$BM.g - Spline_BM1$fitted.values)^2)
Spline_BM2.MSE.train <- 1/n * sum((avesFCBM.train$BM.g - Spline_BM2$fitted.values)^2)


MSE.trainBM <- data.frame(type = 'train', lm_BM = lm_BM.MSE.train, 
                        loglog_BM =loglog_BM.MSE.train,
                        poly2_BM = poly2_BM.MSE.train,
                        poly3_BM = poly3_BM.MSE.train,
                        Spline_BM1 = Spline_BM1.MSE.train,
                       Spline_BM2 = Spline_BM2.MSE.train)
```

### Predictions

```{r}

# Fit lineal model
lm_BM.prd <- predict(lm_BM, newdata = data.frame(FemurCirc = avesFCBM.test$FemurCirc))

# Fit loglog model
loglog_BM.prd <- predict(loglog_BM, newdata = data.frame(FemurCirc = avesFCBM.test$FemurCirc))

# Poly 2 model 
poly2_BM.prd <- predict(poly2_BM, newdata = data.frame(FemurCirc = avesFCBM.test$FemurCirc))

# Poly 3 model 
poly3_BM.prd <- predict(poly3_BM, newdata = data.frame(FemurCirc = avesFCBM.test$FemurCirc))

# Spline model 1 knots
library(splines)
Spline_BM1.prd <- predict(Spline_BM1, newdata = data.frame(FemurCirc = avesFCBM.test$FemurCirc))

# Spline model 2 knots
Spline_BM2.prd <- predict(Spline_BM2, newdata = data.frame(FemurCirc = avesFCBM.test$FemurCirc))
```

### MSE from prediction set

```{r}
n <- length(avesFCBM.test$BM.g)



lm_BM.MSE.test <- 1/n * sum((avesFCBM.test$BM.g - lm_BM.prd)^2) 
loglog_BM.MSE.test <- 1/n * sum((log(avesFCBM.test$BM.g) - loglog_BM.prd)^2)
poly2_BM.MSE.test <- 1/n * sum((avesFCBM.test$BM.g - poly2_BM.prd)^2)
poly3_BM.MSE.test <- 1/n * sum((avesFCBM.test$BM.g - poly3_BM.prd)^2)
Spline_BM1.MSE.test <- 1/n * sum((avesFCBM.test$BM.g - Spline_BM1.prd)^2)
Spline_BM2.MSE.test <- 1/n * sum((avesFCBM.test$BM.g - Spline_BM2.prd)^2)


MSE.testBM <- data.frame(type = 'test', lm_BM = lm_BM.MSE.test, 
                        loglog_BM =loglog_BM.MSE.test,
                        poly2_BM = poly2_BM.MSE.test,
                        poly3_BM = poly3_BM.MSE.test,
                        Spline_BM1 = Spline_BM1.MSE.test,
                       Spline_BM2 = Spline_BM2.MSE.test)

MSE <- rbind(MSE.trainBM, MSE.testBM)

MSE.longBM <- MSE %>% pivot_longer(-type, names_to = 'model', values_to = 'MSE')


levels(as.factor(MSE.long$model))
 MSE.long$model <- factor(MSE.long$model, 
                           levels = c("lm_FC","lmClade1_FC","lmClade2_FC","loglog_FC","logClade1_FC","logClade2_FC","poly2_FC","poly2Clade1_FC","poly2Clade2_FC"
                                      ))


ggplot(data = MSE.longBM, aes(x = model, y = MSE)) +
  geom_line(aes(group = type, color = type) )+ 
  geom_point(aes(color = model))
  
```

### Cross Validation

```{r}
# No test dataset is necessary

train.control <- trainControl(method = "repeatedcv", 
                              number = 10, repeats = 20)

# Fit lineal model
lm_BM <- train(BM.g ~FemurCirc, data = newAves, method = "lm",
               trControl = train.control)

# Fit loglog model
loglog_BM <- train(log(BM.g) ~ log(FemurCirc), data = newAves, method = "lm",
               trControl = train.control)

# Poly 2 model 
poly2_BM <- train(BM.g ~ poly(FemurCirc,2), data = newAves, method = "lm",
               trControl = train.control)

# Poly 2 model 
poly3_BM <- train(BM.g ~ poly(FemurCirc,3), data = newAves, method = "lm",
               trControl = train.control)

# Spline model 1 knots
library(splines)
hist(newAves$FemurCirc)
Spline_BM1 <- train(BM.g ~bs(FemurCirc, knots = 50), data = newAves, method = "lm",
               trControl = train.control)

# Spline model 2 knots
Spline_BM2 <- train(BM.g ~ bs(FemurCirc, knots = c(25, 50)), data = avesFCBM.train, method = "lm",
               trControl = train.control)


MAE.BM <- data.frame(type = 'cv', lm_BM = lm_BM$results$MAE, 
                        loglog_BM = loglog_BM$results$MAE,
                        poly2_BM = poly2_BM$results$MAE,
                        poly3_BM = poly3_BM$results$MAE,
                        Spline_BM1 = Spline_BM1$results$MAE,
                        Spline_BM2 = Spline_BM2$results$MAE)

MAE.longBM <- MAE.BM %>% pivot_longer(-type, names_to = 'model', values_to = 'MAE')

ggplot(data = MAE.longBM, aes(x = model, y = MAE)) +
  geom_line(aes(group = type, color = type) )+ 
  geom_point(aes(color = model))
```

```{r}
# Fit lineal model
lm_BM <- lm(BM.g ~FemurCirc, data = newAves)

# Fit loglog model
loglog_BM <- lm(log(BM.g) ~ log(FemurCirc), data = newAves)

# Poly 2 model 
poly2_BM <- lm(BM.g ~ poly(FemurCirc,2), data = newAves)

# Poly 2 model 
poly3_BM <- lm(BM.g ~ poly(FemurCirc,3), data = newAves)

# Spline model 1 knots
library(splines)
Spline_BM1 <- lm(BM.g ~bs(FemurCirc, knots = 50), data = newAves)

# Spline model 2 knots
Spline_BM2 <- lm(BM.g ~ bs(FemurCirc, knots = c(35, 50)), data = newAves)

AIC(lm_BM,loglog_BM,poly2_BM,poly3_BM,Spline_BM1,Spline_BM2)

summary(Spline_BM2)


check_model(loglog_BM)
```

### Prediction Theropod - back transform

```{r}
Dinos <- read_csv('Estimated.csv')

head(Dinos)

colnames(Dinos)

ggplot(Dinos, aes(y = log(BM.g), x = log(FemurCirc))) +
  geom_point(aes(color = Method)) 


as.factor(Dinos$Clade.2)

# Predict VD - Estimated Body Mass

Andersonetal1985poly <-   0.16 * Dinos$FemurCirc^2.37699


CampbellMarcus1992 <- 10^(-0.065 + 2.411*log10(Dinos$FemurCirc))

CampioneEtal2014 <- 10^(-0.683 + 2.754*log10(Dinos$FemurCirc))

FieldEtal2013 <- exp(-0.11 + 2.4*log(Dinos$FemurCirc))

RomeroAlarcon2023Log <-  exp(-0.09121 + 2.37699*log(Dinos$FemurCirc))

RomeroAlarcon2023poly <- predict(poly2_BM,newdata = data.frame("FemurCirc" = Dinos$FemurCirc))


modelsPredict1 <- as.data.frame(cbind(trueBM.g = Dinos$BM.g, FemurCirc = Dinos$FemurCirc, CampbellMarcus1992, FieldEtal2013, CampioneEtal2014, RomeroAlarcon2023Log, RomeroAlarcon2023poly, Andersonetal1985poly))

modelsPredict.BackDinos <- modelsPredict1 |> pivot_longer(cols = c(CampbellMarcus1992, FieldEtal2013, CampioneEtal2014, RomeroAlarcon2023Log, RomeroAlarcon2023poly, Andersonetal1985poly), names_to = "Models", values_to = "predBM.g")


ggplot(data = modelsPredict.BackDinos) +
  geom_smooth(aes(y = predBM.g, x = FemurCirc, color = Models)) +
  geom_point(data = Dinos,aes(y = BM.g, x = FemurCirc, shape = Method)) 


# Percent prediction error Dinos

modelsPPE <- modelsPredict.BackDinos |> group_by(Models) |> mutate(PPE = abs(as.numeric(trueBM.g) - as.numeric(predBM.g))/as.numeric(predBM.g)* 100) 

meansPPE <- modelsPPE |> group_by(Models) |> summarize( MPPE = mean(PPE), sdPPE = sd(PPE))
meansPPE 

ggplot(modelsPPE) +
  geom_boxplot(aes(x = Models, y = PPE, group = Models, color = Models))


```

```         
```

### Prediction Theropod - transform log

```{r}


# Predict VD - Estimated Body Mass transform

#Andersonetal1985poly <-   0.16 * Dinos$FemurCirc^2.37699


CampbellMarcus1992 <- -0.065 + 2.411*log10(Dinos$FemurCirc)

CampioneEtal2014 <- -0.683 + 2.754*log10(Dinos$FemurCirc)

FieldEtal2013 <- -0.11 + 2.4*log(Dinos$FemurCirc)

RomeroAlarcon2023Log <-  -0.09121 + 2.37699*log(Dinos$FemurCirc)

#RomeroAlarcon2023poly <- predict(poly2_BM,newdata = data.frame("FemurCirc" = Dinos$FemurCirc))

nrow(Dinos)
modelsPredictlog10 <- as.data.frame(cbind(trueBM.g = log10(Dinos$BM.g), FemurCirc = log10(Dinos$FemurCirc), CampbellMarcus1992, CampioneEtal2014, typeLog = rep("log10", length(Dinos$FemurCirc))))

modelsPredictlog <- as.data.frame(cbind(trueBM.g = log(Dinos$BM.g), FemurCirc = log(Dinos$FemurCirc),  FieldEtal2013,  RomeroAlarcon2023Log, typeLog = rep("log", length(Dinos$FemurCirc))))

modelsPredictlog10 <- modelsPredictlog10 |> pivot_longer(cols = c(CampbellMarcus1992, CampioneEtal2014), names_to = "Models", values_to = "predBM.g")

modelsPredictlog <- modelsPredictlog |> pivot_longer(cols = c( FieldEtal2013,  RomeroAlarcon2023Log), names_to = "Models", values_to = "predBM.g")


modelsPredict.DinoLog <- rbind(modelsPredictlog, modelsPredictlog10)

levels(as.factor(modelsPredict.DinoLog $Models))


ggplot(data = modelsPredict.DinoLog ) +
  geom_smooth(aes(y = as.numeric(trueBM.g), x = as.numeric(FemurCirc), color = Models), method = 'lm') +
  geom_point(aes(y = as.numeric(trueBM.g), x = as.numeric(FemurCirc))) +
  facet_wrap(typeLog ~ ., scales = 'free')



# Percent prediction error Dinos

modelsPPE <- modelsPredict.DinoLog  |> group_by(Models) |> mutate(PPE = abs(as.numeric(trueBM.g) - as.numeric(predBM.g))/as.numeric(predBM.g)* 100) 



meansPPE <- modelsPPE |> group_by(Models) |> summarize( MPPE = mean(PPE), sdPPE = sd(PPE))
meansPPE 
ggplot(modelsPPE) +
  geom_boxplot(aes(x = Models, y = PPE, group = Models, color = Models))


```

### Palaeognathae prediction - Back transform

```{r}

# Palaeognathae prediction

palaeognathae <- newAves |> filter(Clade.1 == "Palaeognathae" & !is.na(BM.g) & !is.na(FemurCirc))

as.factor(palaeognathae$Clade.2)

ggplot(data = newAves) +
  geom_point(aes(y = BM.g, x = FemurCirc, )) 

# Predict VD - Estimated Body Mass

Andersonetal1985poly <-   0.16 * palaeognathae$FemurCirc^2.37699

CampbellMarcus1992 <- 10^(-0.065 + 2.411*log10(palaeognathae$FemurCirc))

CampioneEtal2014 <- 10^(-0.683 + 2.754*log10(palaeognathae$FemurCirc))

FieldEtal2013 <- exp(-0.11 + 2.4*log(palaeognathae$FemurCirc))

RomeroAlarcon2023Log <-  exp(-0.09121 + 2.37699*log(palaeognathae$FemurCirc))

RomeroAlarcon2023poly <- predict(poly2_BM,newdata = data.frame("FemurCirc" = palaeognathae$FemurCirc))


modelsPredict1 <- as.data.frame(cbind(trueBM.g = palaeognathae$BM.g, FemurCirc = palaeognathae$FemurCirc, CampbellMarcus1992, FieldEtal2013, CampioneEtal2014, RomeroAlarcon2023Log, RomeroAlarcon2023poly,Andersonetal1985poly))

modelsPredict.backPalae <- modelsPredict1 |> pivot_longer(cols = c(CampbellMarcus1992, FieldEtal2013, CampioneEtal2014, RomeroAlarcon2023Log, RomeroAlarcon2023poly,Andersonetal1985poly), names_to = "Models", values_to = "predBM.g")



levels(as.factor(modelsPredict.backPalae$Models))


ggplot(data = modelsPredict.backPalae) +
  geom_smooth(aes(y = predBM.g, x = FemurCirc, color = Models)) +
  geom_point(data = palaeognathae,aes(y = BM.g, x = FemurCirc)) 


# Percent prediction error Dinos

modelsPPE <- modelsPredict.backPalae  |> group_by(Models) |> mutate(PPE = abs(as.numeric(trueBM.g) - as.numeric(predBM.g))/as.numeric(predBM.g)* 100) 



meansPPE <- modelsPPE |> group_by(Models) |> summarize( MPPE = mean(PPE), sdPPE = sd(PPE))

meansPPE

ggplot(modelsPPE) +
  geom_boxplot(aes(x = Models, y = PPE, group = Models, color = Models))

```

### Palaeognathae - No back transform

```{r}


# Predict VD - Estimated Body Mass no transform

#Andersonetal1985poly <-   0.16 * Dinos$FemurCirc^2.37699


CampbellMarcus1992 <- -0.065 + 2.411*log10(palaeognathae$FemurCirc)

CampioneEtal2014 <- -0.683 + 2.754*log10(palaeognathae$FemurCirc)

FieldEtal2013 <- -0.11 + 2.4*log(palaeognathae$FemurCirc)

RomeroAlarcon2023Log <-  -0.09121 + 2.37699*log(palaeognathae$FemurCirc)

#RomeroAlarcon2023poly <- predict(poly2_BM,newdata = data.frame("FemurCirc" = Dinos$FemurCirc))


modelsPredictlog10 <- as.data.frame(cbind(trueBM.g = log10(palaeognathae$BM.g), FemurCirc = log10(palaeognathae$FemurCirc), CampbellMarcus1992, CampioneEtal2014, typeLog = rep("log10", length(palaeognathae$FemurCirc))))

modelsPredictlog <- as.data.frame(cbind(trueBM.g = log(palaeognathae$BM.g), FemurCirc = log(palaeognathae$FemurCirc),  FieldEtal2013,  RomeroAlarcon2023Log, typeLog = rep("log", length(palaeognathae$FemurCirc))))



modelsPredictlog10 <- modelsPredictlog10 |> pivot_longer(cols = c(CampbellMarcus1992, CampioneEtal2014), names_to = "Models", values_to = "predBM.g")

modelsPredictlog <- modelsPredictlog |> pivot_longer(cols = c( FieldEtal2013,  RomeroAlarcon2023Log), names_to = "Models", values_to = "predBM.g")


modelsPredict.logPalae <- rbind(modelsPredictlog, modelsPredictlog10)


levels(as.factor(modelsPredict.logPalae $Models))


ggplot(data = modelsPredict.logPalae ) +
  geom_smooth(aes(y = as.numeric(trueBM.g), x = as.numeric(FemurCirc), color = Models), method = 'lm') +
  geom_point(aes(y = as.numeric(trueBM.g), x = as.numeric(FemurCirc))) +
  facet_wrap(typeLog ~ ., scales = 'free')


# Percent prediction error Palae

modelsPPE <- modelsPredict.logPalae  |> group_by(Models) |> mutate(PPE = abs(as.numeric(trueBM.g) - as.numeric(predBM.g))/as.numeric(predBM.g)* 100) 



meansPPE <- modelsPPE |> group_by(Models) |> summarize( MPPE = mean(PPE), sdPPE = sd(PPE))

meansPPE

ggplot(modelsPPE) +
  geom_boxplot(aes(x = Models, y = PPE, group = Models, color = Models))
```

### Plot presentation

```{r}

levels(as.factor(new$Sec_Ref))

plotIntro <- new |> filter(Aves == "Y") |> mutate(Ref = ifelse( Sec_Ref == "Campione_et_al_(2014)", "Campione_et_al_2014", ifelse( Sec_Ref == "Field_et_al_(2013)","Field_et_al_2013", ifelse( typeFC == "Predicted", "NewSource", "NewSource")))) |> filter(!is.na(BM.g) & !is.na(FemurCirc)) |> filter(Ref != "NewSource")




# Plot FC ~ FL


ggplot(plotIntro, aes(x = FemurCirc, y = BM.g)) +
  geom_point(aes( color = Ref, shape = Clade.1)) +
  geom_smooth(color = "darkgray", alpha = 0.5, size = 0.5)+
  facet_grid(Ref ~ .)+
  geom_rect(aes(xmin=8, xmax=100, ymin=0.8, ymax=8))
```
