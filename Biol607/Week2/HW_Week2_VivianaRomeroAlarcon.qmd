---
title: "Homework week 2"
author: "Viviana Romero Alarcon"
format: html
editor: visual
---

## QQPLOT

libraries

```{r}
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(forcats)

#pacman::p_load(tidyverse)

```

Set theme for ggplot

```{r}
theme_set(theme_bw(base_size=12))


```

1.  Read data

    ```{r}
    ice <- read_csv("http://biol607.github.io/homework/data/NH_seaice_extent_monthly_1978_2016.csv") %>%
      mutate(Month_Name = factor(Month_Name),
             Month_Name = fct_reorder(Month_Name, Month))
    ```

2.  Boxplot

Make a boxplot showing the variability in sea ice extent every month. IYKYK make it fancy.

```{r}
ggplot(data = ice, mapping = aes( x =Extent,  y = Month_Name))+
  geom_boxplot(color = 'grey50')+
  geom_point(aes(color = Month_Name), size= 0.7, alpha= 0.5)+
  stat_summary(color = 'darkred', shape = 18 )

```

3.  Ridgelines

Use ggridges to do the same thing. What do you learn that is different than the boxplot?

```{r}
library(ggridges)
library(ggplot2)

ggplot(data = ice, mapping = aes( x =Extent,  y = Month_Name)) +
  geom_density_ridges(alpha = 0.5,mapping = aes(color = Month_Name, fill = Month_Name ))

```

4.  Making Groups from the Continuous One thing that's really cool about faceting is that you can use cut\_\*() functions on continuous variables to make facets by groups of continuous variables. To see what I mean, try cut_interval(1:10, n = 5) See how it makes five bins of even width? We use cut_interval() or other cut functions with faceting like so facet_wrap(vars(cut_interval(some_variable))).

```{r}
ggplot(data = ice, mapping = aes( x =Extent)) +
  geom_histogram(bins = 30) +
  facet_wrap(vars(cut_interval(Extent, n = 5)))
```

Optional plot: readable

```{r}
ggplot(data = ice, mapping = aes( x =Extent)) +
  geom_histogram() +
  facet_wrap(vars(Month_Name))
```

With the original data, plot sea ice by year, with different lines (oh! What geom will you need for that?) for different months. Then, use facet_wrap and cut_interval(Month, n=4) to split the plot into seasons.

```{r}
ggplot(data = ice, mapping = aes( x = Extent)) +
  geom_line(aes(y = Year)) +
  facet_wrap(vars(cut_interval(Month, n=4)))

```

5.  Use That Color! Last, make a line plot of sea ice by month with different lines as different years. Gussy it up with colors by year, a different theme, critical values, and whatever other annotations, changes to axes, etc., you think best show the story of this data. For ideas, see the lab, and look at various palettes around. Extra credit for using colorfindr to make a palette.

```{r}
library(pacman)
pacman::p_load(colorfindr, dplyr)
 col <- get_colors("https://upload.wikimedia.org/wikipedia/commons/f/f4/The_Scream.jpg") %>% make_palette(n = 20 )
  
ggplot(data = ice, mapping = aes( x = Extent)) +
  geom_line(aes(y = Month_Name, color= Year))+
  scale_color_gradientn(colours = col)
```

```{r}

 col <- get_colors("https://upload.wikimedia.org/wikipedia/commons/f/f4/The_Scream.jpg") %>% make_palette(n = 20 )
  
 
 ggplot(data = ice, mapping = aes( y = Extent, x = Month_Name)) +
  geom_boxplot()+
  geom_point(aes(color = Year),size = 0.5)+
  scale_color_gradientn(colours = col)+
      theme_minimal()


```

Impress Yourself with Knowledge You Conquered 1. gganimate Make it animated with gganimate. Just like above. See https://gganimate.com/ to learn the package!

```{r}
library(ggplot2)
library(gganimate)
library(gifski)

 
 p <- ggplot(data = ice, mapping = aes( y = Extent, x = Month_Name))  + 
  geom_boxplot() + 
  # Here comes the gganimate code
  transition_states(
    Year,
    transition_length = 2,
    state_length = 1
  ) +
  enter_fade() + 
  exit_shrink() +
  ease_aes('sine-in-out')

animate(p, fps = 20, duration = 15)

```

Impress Yourself with Knowledge You Conquered 2. Something new Use the data and make something wholly new and awesome. Even extra extra credit for something amazing animated.

```{r}
 library(gapminder)

q <-ggplot(ice, aes(y = Extent, x = Day)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  facet_wrap(~Month_Name) +
  # Here comes the gganimate specific bits
  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(Year) +
  ease_aes('linear')

animate(q,  fps = 20, duration = 15)
```

Impress Yourself with Knowledge You Conquered 3. #TidyTuesday Participate in this week or last week's (or this week's) tidy tuesday (and see that link to learn waht it is). See here for data and schedule. Not only include what you do and your code here, but also include a link to where you tweet our your entry with a link to the code and the #tidytuesday hashtag.

Meta 1. We are now generating figures and imagery. It's something that blends creativity, abstract thinking, and quantiative abilities. How confident were you in thinking about making figures before this week versus after grappling with ggplot and the grammer of graphics philosophy?

I think I need moe practice. Decide what is the best plot for my data is not a easy task to me yet.

Meta 2. What's your favorite think about data visualization?

Choose colors

Meta 3. How much time did this take you, roughly? I'm trying to keep track that these assignments aren't killer, more than anything.

3 hours (I spend a lot of time in animate (for the 5 first exercises, I spent 30 min))

Meta 4. Please give yourself a weak/sufficient/strong assessment on this assigment. Feel free to comment on why.

Sufficient
